/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Bill type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Bill{}

// Bill struct for Bill
type Bill struct {
	// Идентификатор счёта
	Id string `json:"id"`
	// Номер счёта
	Number string `json:"number"`
	// Дата счёта
	Date string `json:"date"`
	// Ндс
	WithNDS NullableBool `json:"withNDS,omitempty"`
	// Cчёт выставлен со скидкой
	WithDiscount NullableBool `json:"withDiscount,omitempty"`
	// Комментарий
	Comment NullableString `json:"comment,omitempty"`
	// Идентификатор банковского счёта
	BankAccountId NullableString `json:"bankAccountId,omitempty"`
	// Идентификатор контрагента
	ContractorId NullableString `json:"contractorId,omitempty"`
	// Фактурная часть
	WarehouseItems []BillItem `json:"warehouseItems,omitempty"`
	// Цена за единицу товара включает в себя НДС
	SumsWithNds NullableBool `json:"sumsWithNds,omitempty"`
	// Статус оплаты.  notPaid (Не оплачен)  paid (Оплачен)  partiallyPaid (Частично оплачен)  rejected (Отменён)  overdue (Истёк срок оплаты)
	Status BillStatus `json:"status"`
}

type _Bill Bill

// NewBill instantiates a new Bill object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBill(id string, number string, date string, status BillStatus) *Bill {
	this := Bill{}
	this.Id = id
	this.Number = number
	this.Date = date
	this.Status = status
	return &this
}

// NewBillWithDefaults instantiates a new Bill object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillWithDefaults() *Bill {
	this := Bill{}
	return &this
}

// GetId returns the Id field value
func (o *Bill) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Bill) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Bill) SetId(v string) {
	o.Id = v
}

// GetNumber returns the Number field value
func (o *Bill) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *Bill) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *Bill) SetNumber(v string) {
	o.Number = v
}

// GetDate returns the Date field value
func (o *Bill) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Bill) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Bill) SetDate(v string) {
	o.Date = v
}

// GetWithNDS returns the WithNDS field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bill) GetWithNDS() bool {
	if o == nil || IsNil(o.WithNDS.Get()) {
		var ret bool
		return ret
	}
	return *o.WithNDS.Get()
}

// GetWithNDSOk returns a tuple with the WithNDS field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bill) GetWithNDSOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithNDS.Get(), o.WithNDS.IsSet()
}

// HasWithNDS returns a boolean if a field has been set.
func (o *Bill) HasWithNDS() bool {
	if o != nil && o.WithNDS.IsSet() {
		return true
	}

	return false
}

// SetWithNDS gets a reference to the given NullableBool and assigns it to the WithNDS field.
func (o *Bill) SetWithNDS(v bool) {
	o.WithNDS.Set(&v)
}
// SetWithNDSNil sets the value for WithNDS to be an explicit nil
func (o *Bill) SetWithNDSNil() {
	o.WithNDS.Set(nil)
}

// UnsetWithNDS ensures that no value is present for WithNDS, not even an explicit nil
func (o *Bill) UnsetWithNDS() {
	o.WithNDS.Unset()
}

// GetWithDiscount returns the WithDiscount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bill) GetWithDiscount() bool {
	if o == nil || IsNil(o.WithDiscount.Get()) {
		var ret bool
		return ret
	}
	return *o.WithDiscount.Get()
}

// GetWithDiscountOk returns a tuple with the WithDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bill) GetWithDiscountOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithDiscount.Get(), o.WithDiscount.IsSet()
}

// HasWithDiscount returns a boolean if a field has been set.
func (o *Bill) HasWithDiscount() bool {
	if o != nil && o.WithDiscount.IsSet() {
		return true
	}

	return false
}

// SetWithDiscount gets a reference to the given NullableBool and assigns it to the WithDiscount field.
func (o *Bill) SetWithDiscount(v bool) {
	o.WithDiscount.Set(&v)
}
// SetWithDiscountNil sets the value for WithDiscount to be an explicit nil
func (o *Bill) SetWithDiscountNil() {
	o.WithDiscount.Set(nil)
}

// UnsetWithDiscount ensures that no value is present for WithDiscount, not even an explicit nil
func (o *Bill) UnsetWithDiscount() {
	o.WithDiscount.Unset()
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bill) GetComment() string {
	if o == nil || IsNil(o.Comment.Get()) {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bill) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *Bill) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *Bill) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *Bill) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *Bill) UnsetComment() {
	o.Comment.Unset()
}

// GetBankAccountId returns the BankAccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bill) GetBankAccountId() string {
	if o == nil || IsNil(o.BankAccountId.Get()) {
		var ret string
		return ret
	}
	return *o.BankAccountId.Get()
}

// GetBankAccountIdOk returns a tuple with the BankAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bill) GetBankAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BankAccountId.Get(), o.BankAccountId.IsSet()
}

// HasBankAccountId returns a boolean if a field has been set.
func (o *Bill) HasBankAccountId() bool {
	if o != nil && o.BankAccountId.IsSet() {
		return true
	}

	return false
}

// SetBankAccountId gets a reference to the given NullableString and assigns it to the BankAccountId field.
func (o *Bill) SetBankAccountId(v string) {
	o.BankAccountId.Set(&v)
}
// SetBankAccountIdNil sets the value for BankAccountId to be an explicit nil
func (o *Bill) SetBankAccountIdNil() {
	o.BankAccountId.Set(nil)
}

// UnsetBankAccountId ensures that no value is present for BankAccountId, not even an explicit nil
func (o *Bill) UnsetBankAccountId() {
	o.BankAccountId.Unset()
}

// GetContractorId returns the ContractorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bill) GetContractorId() string {
	if o == nil || IsNil(o.ContractorId.Get()) {
		var ret string
		return ret
	}
	return *o.ContractorId.Get()
}

// GetContractorIdOk returns a tuple with the ContractorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bill) GetContractorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContractorId.Get(), o.ContractorId.IsSet()
}

// HasContractorId returns a boolean if a field has been set.
func (o *Bill) HasContractorId() bool {
	if o != nil && o.ContractorId.IsSet() {
		return true
	}

	return false
}

// SetContractorId gets a reference to the given NullableString and assigns it to the ContractorId field.
func (o *Bill) SetContractorId(v string) {
	o.ContractorId.Set(&v)
}
// SetContractorIdNil sets the value for ContractorId to be an explicit nil
func (o *Bill) SetContractorIdNil() {
	o.ContractorId.Set(nil)
}

// UnsetContractorId ensures that no value is present for ContractorId, not even an explicit nil
func (o *Bill) UnsetContractorId() {
	o.ContractorId.Unset()
}

// GetWarehouseItems returns the WarehouseItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bill) GetWarehouseItems() []BillItem {
	if o == nil {
		var ret []BillItem
		return ret
	}
	return o.WarehouseItems
}

// GetWarehouseItemsOk returns a tuple with the WarehouseItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bill) GetWarehouseItemsOk() ([]BillItem, bool) {
	if o == nil || IsNil(o.WarehouseItems) {
		return nil, false
	}
	return o.WarehouseItems, true
}

// HasWarehouseItems returns a boolean if a field has been set.
func (o *Bill) HasWarehouseItems() bool {
	if o != nil && !IsNil(o.WarehouseItems) {
		return true
	}

	return false
}

// SetWarehouseItems gets a reference to the given []BillItem and assigns it to the WarehouseItems field.
func (o *Bill) SetWarehouseItems(v []BillItem) {
	o.WarehouseItems = v
}

// GetSumsWithNds returns the SumsWithNds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bill) GetSumsWithNds() bool {
	if o == nil || IsNil(o.SumsWithNds.Get()) {
		var ret bool
		return ret
	}
	return *o.SumsWithNds.Get()
}

// GetSumsWithNdsOk returns a tuple with the SumsWithNds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bill) GetSumsWithNdsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SumsWithNds.Get(), o.SumsWithNds.IsSet()
}

// HasSumsWithNds returns a boolean if a field has been set.
func (o *Bill) HasSumsWithNds() bool {
	if o != nil && o.SumsWithNds.IsSet() {
		return true
	}

	return false
}

// SetSumsWithNds gets a reference to the given NullableBool and assigns it to the SumsWithNds field.
func (o *Bill) SetSumsWithNds(v bool) {
	o.SumsWithNds.Set(&v)
}
// SetSumsWithNdsNil sets the value for SumsWithNds to be an explicit nil
func (o *Bill) SetSumsWithNdsNil() {
	o.SumsWithNds.Set(nil)
}

// UnsetSumsWithNds ensures that no value is present for SumsWithNds, not even an explicit nil
func (o *Bill) UnsetSumsWithNds() {
	o.SumsWithNds.Unset()
}

// GetStatus returns the Status field value
func (o *Bill) GetStatus() BillStatus {
	if o == nil {
		var ret BillStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Bill) GetStatusOk() (*BillStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Bill) SetStatus(v BillStatus) {
	o.Status = v
}

func (o Bill) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Bill) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["number"] = o.Number
	toSerialize["date"] = o.Date
	if o.WithNDS.IsSet() {
		toSerialize["withNDS"] = o.WithNDS.Get()
	}
	if o.WithDiscount.IsSet() {
		toSerialize["withDiscount"] = o.WithDiscount.Get()
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	if o.BankAccountId.IsSet() {
		toSerialize["bankAccountId"] = o.BankAccountId.Get()
	}
	if o.ContractorId.IsSet() {
		toSerialize["contractorId"] = o.ContractorId.Get()
	}
	if o.WarehouseItems != nil {
		toSerialize["warehouseItems"] = o.WarehouseItems
	}
	if o.SumsWithNds.IsSet() {
		toSerialize["sumsWithNds"] = o.SumsWithNds.Get()
	}
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *Bill) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"number",
		"date",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBill := _Bill{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBill)

	if err != nil {
		return err
	}

	*o = Bill(varBill)

	return err
}

type NullableBill struct {
	value *Bill
	isSet bool
}

func (v NullableBill) Get() *Bill {
	return v.value
}

func (v *NullableBill) Set(val *Bill) {
	v.value = val
	v.isSet = true
}

func (v NullableBill) IsSet() bool {
	return v.isSet
}

func (v *NullableBill) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBill(val *Bill) *NullableBill {
	return &NullableBill{value: val, isSet: true}
}

func (v NullableBill) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBill) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


