/*
Elba Public API

Testing ElbaAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package elba

import (
	"context"
	openapiclient "github.com/archaron/elba-api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_elba_ElbaAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ElbaAPIService LongRunningTasksTaskIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taskId string

		resp, httpRes, err := apiClient.ElbaAPI.LongRunningTasksTaskIdGet(context.Background(), taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdActsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdActsPost(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdBankAccountsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdBankAccountsGet(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdBankAccountsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdBankAccountsPost(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdBillsBillIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var billId string

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdBillsBillIdGet(context.Background(), organizationId, billId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdBillsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdBillsPost(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdContractorsContractorIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var contractorId string

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdContractorsContractorIdGet(context.Background(), organizationId, contractorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdContractorsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdContractorsPost(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdContractorsSearchPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdContractorsSearchPost(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdDeliveryNotesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdDeliveryNotesPost(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdDocumentNewsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdDocumentNewsGet(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdDocumentNewsSubscriptionPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdDocumentNewsSubscriptionPost(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdProductsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdProductsPost(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdProductsProductIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var productId string

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdProductsProductIdGet(context.Background(), organizationId, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdProductsProductIdUpdatePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var productId string

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdProductsProductIdUpdatePost(context.Background(), organizationId, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdProductsSearchPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdProductsSearchPost(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ElbaAPIService OrganizationsOrganizationIdUniversalTransferDocumentsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ElbaAPI.OrganizationsOrganizationIdUniversalTransferDocumentsPost(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
