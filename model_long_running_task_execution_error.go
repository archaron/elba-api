/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LongRunningTaskExecutionError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LongRunningTaskExecutionError{}

// LongRunningTaskExecutionError struct for LongRunningTaskExecutionError
type LongRunningTaskExecutionError struct {
	// Идентификатор ошибки
	TraceId string `json:"traceId"`
	// Текст ошибки
	Message string `json:"message"`
}

type _LongRunningTaskExecutionError LongRunningTaskExecutionError

// NewLongRunningTaskExecutionError instantiates a new LongRunningTaskExecutionError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLongRunningTaskExecutionError(traceId string, message string) *LongRunningTaskExecutionError {
	this := LongRunningTaskExecutionError{}
	this.TraceId = traceId
	this.Message = message
	return &this
}

// NewLongRunningTaskExecutionErrorWithDefaults instantiates a new LongRunningTaskExecutionError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLongRunningTaskExecutionErrorWithDefaults() *LongRunningTaskExecutionError {
	this := LongRunningTaskExecutionError{}
	return &this
}

// GetTraceId returns the TraceId field value
func (o *LongRunningTaskExecutionError) GetTraceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value
// and a boolean to check if the value has been set.
func (o *LongRunningTaskExecutionError) GetTraceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceId, true
}

// SetTraceId sets field value
func (o *LongRunningTaskExecutionError) SetTraceId(v string) {
	o.TraceId = v
}

// GetMessage returns the Message field value
func (o *LongRunningTaskExecutionError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *LongRunningTaskExecutionError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *LongRunningTaskExecutionError) SetMessage(v string) {
	o.Message = v
}

func (o LongRunningTaskExecutionError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LongRunningTaskExecutionError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["traceId"] = o.TraceId
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *LongRunningTaskExecutionError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"traceId",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLongRunningTaskExecutionError := _LongRunningTaskExecutionError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLongRunningTaskExecutionError)

	if err != nil {
		return err
	}

	*o = LongRunningTaskExecutionError(varLongRunningTaskExecutionError)

	return err
}

type NullableLongRunningTaskExecutionError struct {
	value *LongRunningTaskExecutionError
	isSet bool
}

func (v NullableLongRunningTaskExecutionError) Get() *LongRunningTaskExecutionError {
	return v.value
}

func (v *NullableLongRunningTaskExecutionError) Set(val *LongRunningTaskExecutionError) {
	v.value = val
	v.isSet = true
}

func (v NullableLongRunningTaskExecutionError) IsSet() bool {
	return v.isSet
}

func (v *NullableLongRunningTaskExecutionError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLongRunningTaskExecutionError(val *LongRunningTaskExecutionError) *NullableLongRunningTaskExecutionError {
	return &NullableLongRunningTaskExecutionError{value: val, isSet: true}
}

func (v NullableLongRunningTaskExecutionError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLongRunningTaskExecutionError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


