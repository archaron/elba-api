/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DocumentNews type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentNews{}

// DocumentNews struct for DocumentNews
type DocumentNews struct {
	// Идентификатор новости
	Id int64 `json:"id"`
	// Тип новости  billPaymentNews
	NewsType NewsType `json:"newsType"`
	NewsContent DocumentNewsNewsContent `json:"newsContent"`
}

type _DocumentNews DocumentNews

// NewDocumentNews instantiates a new DocumentNews object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentNews(id int64, newsType NewsType, newsContent DocumentNewsNewsContent) *DocumentNews {
	this := DocumentNews{}
	this.Id = id
	this.NewsType = newsType
	this.NewsContent = newsContent
	return &this
}

// NewDocumentNewsWithDefaults instantiates a new DocumentNews object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentNewsWithDefaults() *DocumentNews {
	this := DocumentNews{}
	return &this
}

// GetId returns the Id field value
func (o *DocumentNews) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DocumentNews) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DocumentNews) SetId(v int64) {
	o.Id = v
}

// GetNewsType returns the NewsType field value
func (o *DocumentNews) GetNewsType() NewsType {
	if o == nil {
		var ret NewsType
		return ret
	}

	return o.NewsType
}

// GetNewsTypeOk returns a tuple with the NewsType field value
// and a boolean to check if the value has been set.
func (o *DocumentNews) GetNewsTypeOk() (*NewsType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewsType, true
}

// SetNewsType sets field value
func (o *DocumentNews) SetNewsType(v NewsType) {
	o.NewsType = v
}

// GetNewsContent returns the NewsContent field value
func (o *DocumentNews) GetNewsContent() DocumentNewsNewsContent {
	if o == nil {
		var ret DocumentNewsNewsContent
		return ret
	}

	return o.NewsContent
}

// GetNewsContentOk returns a tuple with the NewsContent field value
// and a boolean to check if the value has been set.
func (o *DocumentNews) GetNewsContentOk() (*DocumentNewsNewsContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewsContent, true
}

// SetNewsContent sets field value
func (o *DocumentNews) SetNewsContent(v DocumentNewsNewsContent) {
	o.NewsContent = v
}

func (o DocumentNews) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentNews) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["newsType"] = o.NewsType
	toSerialize["newsContent"] = o.NewsContent
	return toSerialize, nil
}

func (o *DocumentNews) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"newsType",
		"newsContent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocumentNews := _DocumentNews{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDocumentNews)

	if err != nil {
		return err
	}

	*o = DocumentNews(varDocumentNews)

	return err
}

type NullableDocumentNews struct {
	value *DocumentNews
	isSet bool
}

func (v NullableDocumentNews) Get() *DocumentNews {
	return v.value
}

func (v *NullableDocumentNews) Set(val *DocumentNews) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentNews) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentNews) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentNews(val *DocumentNews) *NullableDocumentNews {
	return &NullableDocumentNews{value: val, isSet: true}
}

func (v NullableDocumentNews) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentNews) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


