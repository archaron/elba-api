/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
)

// checks if the SearchProductsFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchProductsFilter{}

// SearchProductsFilter struct for SearchProductsFilter
type SearchProductsFilter struct {
	// Название товара
	ProductName NullableString `json:"productName,omitempty"`
	// Артикул
	Article NullableString `json:"article,omitempty"`
}

// NewSearchProductsFilter instantiates a new SearchProductsFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchProductsFilter() *SearchProductsFilter {
	this := SearchProductsFilter{}
	return &this
}

// NewSearchProductsFilterWithDefaults instantiates a new SearchProductsFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchProductsFilterWithDefaults() *SearchProductsFilter {
	this := SearchProductsFilter{}
	return &this
}

// GetProductName returns the ProductName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchProductsFilter) GetProductName() string {
	if o == nil || IsNil(o.ProductName.Get()) {
		var ret string
		return ret
	}
	return *o.ProductName.Get()
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchProductsFilter) GetProductNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductName.Get(), o.ProductName.IsSet()
}

// HasProductName returns a boolean if a field has been set.
func (o *SearchProductsFilter) HasProductName() bool {
	if o != nil && o.ProductName.IsSet() {
		return true
	}

	return false
}

// SetProductName gets a reference to the given NullableString and assigns it to the ProductName field.
func (o *SearchProductsFilter) SetProductName(v string) {
	o.ProductName.Set(&v)
}
// SetProductNameNil sets the value for ProductName to be an explicit nil
func (o *SearchProductsFilter) SetProductNameNil() {
	o.ProductName.Set(nil)
}

// UnsetProductName ensures that no value is present for ProductName, not even an explicit nil
func (o *SearchProductsFilter) UnsetProductName() {
	o.ProductName.Unset()
}

// GetArticle returns the Article field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchProductsFilter) GetArticle() string {
	if o == nil || IsNil(o.Article.Get()) {
		var ret string
		return ret
	}
	return *o.Article.Get()
}

// GetArticleOk returns a tuple with the Article field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchProductsFilter) GetArticleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Article.Get(), o.Article.IsSet()
}

// HasArticle returns a boolean if a field has been set.
func (o *SearchProductsFilter) HasArticle() bool {
	if o != nil && o.Article.IsSet() {
		return true
	}

	return false
}

// SetArticle gets a reference to the given NullableString and assigns it to the Article field.
func (o *SearchProductsFilter) SetArticle(v string) {
	o.Article.Set(&v)
}
// SetArticleNil sets the value for Article to be an explicit nil
func (o *SearchProductsFilter) SetArticleNil() {
	o.Article.Set(nil)
}

// UnsetArticle ensures that no value is present for Article, not even an explicit nil
func (o *SearchProductsFilter) UnsetArticle() {
	o.Article.Unset()
}

func (o SearchProductsFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchProductsFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ProductName.IsSet() {
		toSerialize["productName"] = o.ProductName.Get()
	}
	if o.Article.IsSet() {
		toSerialize["article"] = o.Article.Get()
	}
	return toSerialize, nil
}

type NullableSearchProductsFilter struct {
	value *SearchProductsFilter
	isSet bool
}

func (v NullableSearchProductsFilter) Get() *SearchProductsFilter {
	return v.value
}

func (v *NullableSearchProductsFilter) Set(val *SearchProductsFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchProductsFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchProductsFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchProductsFilter(val *SearchProductsFilter) *NullableSearchProductsFilter {
	return &NullableSearchProductsFilter{value: val, isSet: true}
}

func (v NullableSearchProductsFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchProductsFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


