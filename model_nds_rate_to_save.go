/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
	"fmt"
)

// NDSRateToSave   withoutNds (Без НДС)  nds0 (0%)  nds5 (5%)  nds10 (10%)  nds20 (20%)
type NDSRateToSave string

// List of NDSRateToSave
const (
	WithoutNds NDSRateToSave = "withoutNds"
	Nds0 NDSRateToSave = "nds0"
	Nds5 NDSRateToSave = "nds5"
	Nds10 NDSRateToSave = "nds10"
	Nds20 NDSRateToSave = "nds20"
)

// All allowed values of NDSRateToSave enum
var AllowedNDSRateToSaveEnumValues = []NDSRateToSave{
	"withoutNds",
	"nds0",
	"nds5",
	"nds10",
	"nds20",
}

func (v *NDSRateToSave) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NDSRateToSave(value)
	for _, existing := range AllowedNDSRateToSaveEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NDSRateToSave", value)
}

// NewNDSRateToSaveFromValue returns a pointer to a valid NDSRateToSave
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNDSRateToSaveFromValue(v string) (*NDSRateToSave, error) {
	ev := NDSRateToSave(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NDSRateToSave: valid values are %v", v, AllowedNDSRateToSaveEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NDSRateToSave) IsValid() bool {
	for _, existing := range AllowedNDSRateToSaveEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NDSRateToSave value
func (v NDSRateToSave) Ptr() *NDSRateToSave {
	return &v
}

type NullableNDSRateToSave struct {
	value *NDSRateToSave
	isSet bool
}

func (v NullableNDSRateToSave) Get() *NDSRateToSave {
	return v.value
}

func (v *NullableNDSRateToSave) Set(val *NDSRateToSave) {
	v.value = val
	v.isSet = true
}

func (v NullableNDSRateToSave) IsSet() bool {
	return v.isSet
}

func (v *NullableNDSRateToSave) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNDSRateToSave(val *NDSRateToSave) *NullableNDSRateToSave {
	return &NullableNDSRateToSave{value: val, isSet: true}
}

func (v NullableNDSRateToSave) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNDSRateToSave) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

