/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateProductRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProductRequest{}

// UpdateProductRequest struct for UpdateProductRequest
type UpdateProductRequest struct {
	// Список названий
	Names []ProductNameToUpdate `json:"names"`
	// Список единиц измерений
	Units []ProductUnitToUpdate `json:"units"`
	// Артикул
	Article NullableString `json:"article,omitempty"`
	// Комментарий
	Comment NullableString `json:"comment,omitempty"`
}

type _UpdateProductRequest UpdateProductRequest

// NewUpdateProductRequest instantiates a new UpdateProductRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProductRequest(names []ProductNameToUpdate, units []ProductUnitToUpdate) *UpdateProductRequest {
	this := UpdateProductRequest{}
	this.Names = names
	this.Units = units
	return &this
}

// NewUpdateProductRequestWithDefaults instantiates a new UpdateProductRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProductRequestWithDefaults() *UpdateProductRequest {
	this := UpdateProductRequest{}
	return &this
}

// GetNames returns the Names field value
func (o *UpdateProductRequest) GetNames() []ProductNameToUpdate {
	if o == nil {
		var ret []ProductNameToUpdate
		return ret
	}

	return o.Names
}

// GetNamesOk returns a tuple with the Names field value
// and a boolean to check if the value has been set.
func (o *UpdateProductRequest) GetNamesOk() ([]ProductNameToUpdate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Names, true
}

// SetNames sets field value
func (o *UpdateProductRequest) SetNames(v []ProductNameToUpdate) {
	o.Names = v
}

// GetUnits returns the Units field value
func (o *UpdateProductRequest) GetUnits() []ProductUnitToUpdate {
	if o == nil {
		var ret []ProductUnitToUpdate
		return ret
	}

	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value
// and a boolean to check if the value has been set.
func (o *UpdateProductRequest) GetUnitsOk() ([]ProductUnitToUpdate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Units, true
}

// SetUnits sets field value
func (o *UpdateProductRequest) SetUnits(v []ProductUnitToUpdate) {
	o.Units = v
}

// GetArticle returns the Article field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateProductRequest) GetArticle() string {
	if o == nil || IsNil(o.Article.Get()) {
		var ret string
		return ret
	}
	return *o.Article.Get()
}

// GetArticleOk returns a tuple with the Article field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateProductRequest) GetArticleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Article.Get(), o.Article.IsSet()
}

// HasArticle returns a boolean if a field has been set.
func (o *UpdateProductRequest) HasArticle() bool {
	if o != nil && o.Article.IsSet() {
		return true
	}

	return false
}

// SetArticle gets a reference to the given NullableString and assigns it to the Article field.
func (o *UpdateProductRequest) SetArticle(v string) {
	o.Article.Set(&v)
}
// SetArticleNil sets the value for Article to be an explicit nil
func (o *UpdateProductRequest) SetArticleNil() {
	o.Article.Set(nil)
}

// UnsetArticle ensures that no value is present for Article, not even an explicit nil
func (o *UpdateProductRequest) UnsetArticle() {
	o.Article.Unset()
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateProductRequest) GetComment() string {
	if o == nil || IsNil(o.Comment.Get()) {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateProductRequest) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *UpdateProductRequest) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *UpdateProductRequest) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *UpdateProductRequest) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *UpdateProductRequest) UnsetComment() {
	o.Comment.Unset()
}

func (o UpdateProductRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProductRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["names"] = o.Names
	toSerialize["units"] = o.Units
	if o.Article.IsSet() {
		toSerialize["article"] = o.Article.Get()
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	return toSerialize, nil
}

func (o *UpdateProductRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"names",
		"units",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateProductRequest := _UpdateProductRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateProductRequest)

	if err != nil {
		return err
	}

	*o = UpdateProductRequest(varUpdateProductRequest)

	return err
}

type NullableUpdateProductRequest struct {
	value *UpdateProductRequest
	isSet bool
}

func (v NullableUpdateProductRequest) Get() *UpdateProductRequest {
	return v.value
}

func (v *NullableUpdateProductRequest) Set(val *UpdateProductRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProductRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProductRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProductRequest(val *UpdateProductRequest) *NullableUpdateProductRequest {
	return &NullableUpdateProductRequest{value: val, isSet: true}
}

func (v NullableUpdateProductRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProductRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


