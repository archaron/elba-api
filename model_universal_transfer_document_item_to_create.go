/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UniversalTransferDocumentItemToCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UniversalTransferDocumentItemToCreate{}

// UniversalTransferDocumentItemToCreate struct for UniversalTransferDocumentItemToCreate
type UniversalTransferDocumentItemToCreate struct {
	// Наименование товара или услуги
	ProductName string `json:"productName"`
	// Тип товара  product (Товар)  service (Услуга)
	ProductType ProductType `json:"productType"`
	// Единица измерения
	UnitName string `json:"unitName"`
	// Количество
	Quantity float64 `json:"quantity"`
	// Цена за единицу товара
	Price NullableFloat64 `json:"price,omitempty"`
	// НДС  withoutNds (Без НДС)  nds0 (0%)  nds5 (5%)  nds10 (10%)  nds20 (20%)
	NdsRate NullableNDSRateToSave `json:"ndsRate,omitempty"`
	// РНПТ
	Rnpt NullableString `json:"rnpt,omitempty"`
	// Страна происхождения товара
	OriginOfProductCountry NullableString `json:"originOfProductCountry,omitempty"`
	// Скидка
	Discount NullableFloat64 `json:"discount,omitempty"`
}

type _UniversalTransferDocumentItemToCreate UniversalTransferDocumentItemToCreate

// NewUniversalTransferDocumentItemToCreate instantiates a new UniversalTransferDocumentItemToCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniversalTransferDocumentItemToCreate(productName string, productType ProductType, unitName string, quantity float64) *UniversalTransferDocumentItemToCreate {
	this := UniversalTransferDocumentItemToCreate{}
	this.ProductName = productName
	this.ProductType = productType
	this.UnitName = unitName
	this.Quantity = quantity
	return &this
}

// NewUniversalTransferDocumentItemToCreateWithDefaults instantiates a new UniversalTransferDocumentItemToCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniversalTransferDocumentItemToCreateWithDefaults() *UniversalTransferDocumentItemToCreate {
	this := UniversalTransferDocumentItemToCreate{}
	return &this
}

// GetProductName returns the ProductName field value
func (o *UniversalTransferDocumentItemToCreate) GetProductName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value
// and a boolean to check if the value has been set.
func (o *UniversalTransferDocumentItemToCreate) GetProductNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductName, true
}

// SetProductName sets field value
func (o *UniversalTransferDocumentItemToCreate) SetProductName(v string) {
	o.ProductName = v
}

// GetProductType returns the ProductType field value
func (o *UniversalTransferDocumentItemToCreate) GetProductType() ProductType {
	if o == nil {
		var ret ProductType
		return ret
	}

	return o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value
// and a boolean to check if the value has been set.
func (o *UniversalTransferDocumentItemToCreate) GetProductTypeOk() (*ProductType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductType, true
}

// SetProductType sets field value
func (o *UniversalTransferDocumentItemToCreate) SetProductType(v ProductType) {
	o.ProductType = v
}

// GetUnitName returns the UnitName field value
func (o *UniversalTransferDocumentItemToCreate) GetUnitName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnitName
}

// GetUnitNameOk returns a tuple with the UnitName field value
// and a boolean to check if the value has been set.
func (o *UniversalTransferDocumentItemToCreate) GetUnitNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitName, true
}

// SetUnitName sets field value
func (o *UniversalTransferDocumentItemToCreate) SetUnitName(v string) {
	o.UnitName = v
}

// GetQuantity returns the Quantity field value
func (o *UniversalTransferDocumentItemToCreate) GetQuantity() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *UniversalTransferDocumentItemToCreate) GetQuantityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *UniversalTransferDocumentItemToCreate) SetQuantity(v float64) {
	o.Quantity = v
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniversalTransferDocumentItemToCreate) GetPrice() float64 {
	if o == nil || IsNil(o.Price.Get()) {
		var ret float64
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniversalTransferDocumentItemToCreate) GetPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *UniversalTransferDocumentItemToCreate) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat64 and assigns it to the Price field.
func (o *UniversalTransferDocumentItemToCreate) SetPrice(v float64) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *UniversalTransferDocumentItemToCreate) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *UniversalTransferDocumentItemToCreate) UnsetPrice() {
	o.Price.Unset()
}

// GetNdsRate returns the NdsRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniversalTransferDocumentItemToCreate) GetNdsRate() NDSRateToSave {
	if o == nil || IsNil(o.NdsRate.Get()) {
		var ret NDSRateToSave
		return ret
	}
	return *o.NdsRate.Get()
}

// GetNdsRateOk returns a tuple with the NdsRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniversalTransferDocumentItemToCreate) GetNdsRateOk() (*NDSRateToSave, bool) {
	if o == nil {
		return nil, false
	}
	return o.NdsRate.Get(), o.NdsRate.IsSet()
}

// HasNdsRate returns a boolean if a field has been set.
func (o *UniversalTransferDocumentItemToCreate) HasNdsRate() bool {
	if o != nil && o.NdsRate.IsSet() {
		return true
	}

	return false
}

// SetNdsRate gets a reference to the given NullableNDSRateToSave and assigns it to the NdsRate field.
func (o *UniversalTransferDocumentItemToCreate) SetNdsRate(v NDSRateToSave) {
	o.NdsRate.Set(&v)
}
// SetNdsRateNil sets the value for NdsRate to be an explicit nil
func (o *UniversalTransferDocumentItemToCreate) SetNdsRateNil() {
	o.NdsRate.Set(nil)
}

// UnsetNdsRate ensures that no value is present for NdsRate, not even an explicit nil
func (o *UniversalTransferDocumentItemToCreate) UnsetNdsRate() {
	o.NdsRate.Unset()
}

// GetRnpt returns the Rnpt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniversalTransferDocumentItemToCreate) GetRnpt() string {
	if o == nil || IsNil(o.Rnpt.Get()) {
		var ret string
		return ret
	}
	return *o.Rnpt.Get()
}

// GetRnptOk returns a tuple with the Rnpt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniversalTransferDocumentItemToCreate) GetRnptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rnpt.Get(), o.Rnpt.IsSet()
}

// HasRnpt returns a boolean if a field has been set.
func (o *UniversalTransferDocumentItemToCreate) HasRnpt() bool {
	if o != nil && o.Rnpt.IsSet() {
		return true
	}

	return false
}

// SetRnpt gets a reference to the given NullableString and assigns it to the Rnpt field.
func (o *UniversalTransferDocumentItemToCreate) SetRnpt(v string) {
	o.Rnpt.Set(&v)
}
// SetRnptNil sets the value for Rnpt to be an explicit nil
func (o *UniversalTransferDocumentItemToCreate) SetRnptNil() {
	o.Rnpt.Set(nil)
}

// UnsetRnpt ensures that no value is present for Rnpt, not even an explicit nil
func (o *UniversalTransferDocumentItemToCreate) UnsetRnpt() {
	o.Rnpt.Unset()
}

// GetOriginOfProductCountry returns the OriginOfProductCountry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniversalTransferDocumentItemToCreate) GetOriginOfProductCountry() string {
	if o == nil || IsNil(o.OriginOfProductCountry.Get()) {
		var ret string
		return ret
	}
	return *o.OriginOfProductCountry.Get()
}

// GetOriginOfProductCountryOk returns a tuple with the OriginOfProductCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniversalTransferDocumentItemToCreate) GetOriginOfProductCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginOfProductCountry.Get(), o.OriginOfProductCountry.IsSet()
}

// HasOriginOfProductCountry returns a boolean if a field has been set.
func (o *UniversalTransferDocumentItemToCreate) HasOriginOfProductCountry() bool {
	if o != nil && o.OriginOfProductCountry.IsSet() {
		return true
	}

	return false
}

// SetOriginOfProductCountry gets a reference to the given NullableString and assigns it to the OriginOfProductCountry field.
func (o *UniversalTransferDocumentItemToCreate) SetOriginOfProductCountry(v string) {
	o.OriginOfProductCountry.Set(&v)
}
// SetOriginOfProductCountryNil sets the value for OriginOfProductCountry to be an explicit nil
func (o *UniversalTransferDocumentItemToCreate) SetOriginOfProductCountryNil() {
	o.OriginOfProductCountry.Set(nil)
}

// UnsetOriginOfProductCountry ensures that no value is present for OriginOfProductCountry, not even an explicit nil
func (o *UniversalTransferDocumentItemToCreate) UnsetOriginOfProductCountry() {
	o.OriginOfProductCountry.Unset()
}

// GetDiscount returns the Discount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniversalTransferDocumentItemToCreate) GetDiscount() float64 {
	if o == nil || IsNil(o.Discount.Get()) {
		var ret float64
		return ret
	}
	return *o.Discount.Get()
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniversalTransferDocumentItemToCreate) GetDiscountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Discount.Get(), o.Discount.IsSet()
}

// HasDiscount returns a boolean if a field has been set.
func (o *UniversalTransferDocumentItemToCreate) HasDiscount() bool {
	if o != nil && o.Discount.IsSet() {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given NullableFloat64 and assigns it to the Discount field.
func (o *UniversalTransferDocumentItemToCreate) SetDiscount(v float64) {
	o.Discount.Set(&v)
}
// SetDiscountNil sets the value for Discount to be an explicit nil
func (o *UniversalTransferDocumentItemToCreate) SetDiscountNil() {
	o.Discount.Set(nil)
}

// UnsetDiscount ensures that no value is present for Discount, not even an explicit nil
func (o *UniversalTransferDocumentItemToCreate) UnsetDiscount() {
	o.Discount.Unset()
}

func (o UniversalTransferDocumentItemToCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UniversalTransferDocumentItemToCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["productName"] = o.ProductName
	toSerialize["productType"] = o.ProductType
	toSerialize["unitName"] = o.UnitName
	toSerialize["quantity"] = o.Quantity
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if o.NdsRate.IsSet() {
		toSerialize["ndsRate"] = o.NdsRate.Get()
	}
	if o.Rnpt.IsSet() {
		toSerialize["rnpt"] = o.Rnpt.Get()
	}
	if o.OriginOfProductCountry.IsSet() {
		toSerialize["originOfProductCountry"] = o.OriginOfProductCountry.Get()
	}
	if o.Discount.IsSet() {
		toSerialize["discount"] = o.Discount.Get()
	}
	return toSerialize, nil
}

func (o *UniversalTransferDocumentItemToCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"productName",
		"productType",
		"unitName",
		"quantity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUniversalTransferDocumentItemToCreate := _UniversalTransferDocumentItemToCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUniversalTransferDocumentItemToCreate)

	if err != nil {
		return err
	}

	*o = UniversalTransferDocumentItemToCreate(varUniversalTransferDocumentItemToCreate)

	return err
}

type NullableUniversalTransferDocumentItemToCreate struct {
	value *UniversalTransferDocumentItemToCreate
	isSet bool
}

func (v NullableUniversalTransferDocumentItemToCreate) Get() *UniversalTransferDocumentItemToCreate {
	return v.value
}

func (v *NullableUniversalTransferDocumentItemToCreate) Set(val *UniversalTransferDocumentItemToCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableUniversalTransferDocumentItemToCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableUniversalTransferDocumentItemToCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniversalTransferDocumentItemToCreate(val *UniversalTransferDocumentItemToCreate) *NullableUniversalTransferDocumentItemToCreate {
	return &NullableUniversalTransferDocumentItemToCreate{value: val, isSet: true}
}

func (v NullableUniversalTransferDocumentItemToCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniversalTransferDocumentItemToCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


