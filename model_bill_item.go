/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BillItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillItem{}

// BillItem struct for BillItem
type BillItem struct {
	// Идентификатор позиции
	Id string `json:"id"`
	// Наименование товара или услуги
	ProductName NullableString `json:"productName,omitempty"`
	// Единицы измерения
	UnitName NullableString `json:"unitName,omitempty"`
	// Количество
	Quantity float64 `json:"quantity"`
	// Цена за единицу товара
	Price NullableFloat64 `json:"price,omitempty"`
	// Сумма
	Sum NullableFloat64 `json:"sum,omitempty"`
	// НДС  withoutNds (Без НДС)  nds0 (0%)  nds5 (5%)  nds10 (10%)  nds18 (18%)  nds20 (20%)
	NdsRate NDSRate `json:"ndsRate"`
	// Скидка
	Discount NullableFloat64 `json:"discount,omitempty"`
}

type _BillItem BillItem

// NewBillItem instantiates a new BillItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillItem(id string, quantity float64, ndsRate NDSRate) *BillItem {
	this := BillItem{}
	this.Id = id
	this.Quantity = quantity
	this.NdsRate = ndsRate
	return &this
}

// NewBillItemWithDefaults instantiates a new BillItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillItemWithDefaults() *BillItem {
	this := BillItem{}
	return &this
}

// GetId returns the Id field value
func (o *BillItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BillItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BillItem) SetId(v string) {
	o.Id = v
}

// GetProductName returns the ProductName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillItem) GetProductName() string {
	if o == nil || IsNil(o.ProductName.Get()) {
		var ret string
		return ret
	}
	return *o.ProductName.Get()
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillItem) GetProductNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductName.Get(), o.ProductName.IsSet()
}

// HasProductName returns a boolean if a field has been set.
func (o *BillItem) HasProductName() bool {
	if o != nil && o.ProductName.IsSet() {
		return true
	}

	return false
}

// SetProductName gets a reference to the given NullableString and assigns it to the ProductName field.
func (o *BillItem) SetProductName(v string) {
	o.ProductName.Set(&v)
}
// SetProductNameNil sets the value for ProductName to be an explicit nil
func (o *BillItem) SetProductNameNil() {
	o.ProductName.Set(nil)
}

// UnsetProductName ensures that no value is present for ProductName, not even an explicit nil
func (o *BillItem) UnsetProductName() {
	o.ProductName.Unset()
}

// GetUnitName returns the UnitName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillItem) GetUnitName() string {
	if o == nil || IsNil(o.UnitName.Get()) {
		var ret string
		return ret
	}
	return *o.UnitName.Get()
}

// GetUnitNameOk returns a tuple with the UnitName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillItem) GetUnitNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitName.Get(), o.UnitName.IsSet()
}

// HasUnitName returns a boolean if a field has been set.
func (o *BillItem) HasUnitName() bool {
	if o != nil && o.UnitName.IsSet() {
		return true
	}

	return false
}

// SetUnitName gets a reference to the given NullableString and assigns it to the UnitName field.
func (o *BillItem) SetUnitName(v string) {
	o.UnitName.Set(&v)
}
// SetUnitNameNil sets the value for UnitName to be an explicit nil
func (o *BillItem) SetUnitNameNil() {
	o.UnitName.Set(nil)
}

// UnsetUnitName ensures that no value is present for UnitName, not even an explicit nil
func (o *BillItem) UnsetUnitName() {
	o.UnitName.Unset()
}

// GetQuantity returns the Quantity field value
func (o *BillItem) GetQuantity() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *BillItem) GetQuantityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *BillItem) SetQuantity(v float64) {
	o.Quantity = v
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillItem) GetPrice() float64 {
	if o == nil || IsNil(o.Price.Get()) {
		var ret float64
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillItem) GetPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *BillItem) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat64 and assigns it to the Price field.
func (o *BillItem) SetPrice(v float64) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *BillItem) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *BillItem) UnsetPrice() {
	o.Price.Unset()
}

// GetSum returns the Sum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillItem) GetSum() float64 {
	if o == nil || IsNil(o.Sum.Get()) {
		var ret float64
		return ret
	}
	return *o.Sum.Get()
}

// GetSumOk returns a tuple with the Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillItem) GetSumOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sum.Get(), o.Sum.IsSet()
}

// HasSum returns a boolean if a field has been set.
func (o *BillItem) HasSum() bool {
	if o != nil && o.Sum.IsSet() {
		return true
	}

	return false
}

// SetSum gets a reference to the given NullableFloat64 and assigns it to the Sum field.
func (o *BillItem) SetSum(v float64) {
	o.Sum.Set(&v)
}
// SetSumNil sets the value for Sum to be an explicit nil
func (o *BillItem) SetSumNil() {
	o.Sum.Set(nil)
}

// UnsetSum ensures that no value is present for Sum, not even an explicit nil
func (o *BillItem) UnsetSum() {
	o.Sum.Unset()
}

// GetNdsRate returns the NdsRate field value
func (o *BillItem) GetNdsRate() NDSRate {
	if o == nil {
		var ret NDSRate
		return ret
	}

	return o.NdsRate
}

// GetNdsRateOk returns a tuple with the NdsRate field value
// and a boolean to check if the value has been set.
func (o *BillItem) GetNdsRateOk() (*NDSRate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NdsRate, true
}

// SetNdsRate sets field value
func (o *BillItem) SetNdsRate(v NDSRate) {
	o.NdsRate = v
}

// GetDiscount returns the Discount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillItem) GetDiscount() float64 {
	if o == nil || IsNil(o.Discount.Get()) {
		var ret float64
		return ret
	}
	return *o.Discount.Get()
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillItem) GetDiscountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Discount.Get(), o.Discount.IsSet()
}

// HasDiscount returns a boolean if a field has been set.
func (o *BillItem) HasDiscount() bool {
	if o != nil && o.Discount.IsSet() {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given NullableFloat64 and assigns it to the Discount field.
func (o *BillItem) SetDiscount(v float64) {
	o.Discount.Set(&v)
}
// SetDiscountNil sets the value for Discount to be an explicit nil
func (o *BillItem) SetDiscountNil() {
	o.Discount.Set(nil)
}

// UnsetDiscount ensures that no value is present for Discount, not even an explicit nil
func (o *BillItem) UnsetDiscount() {
	o.Discount.Unset()
}

func (o BillItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.ProductName.IsSet() {
		toSerialize["productName"] = o.ProductName.Get()
	}
	if o.UnitName.IsSet() {
		toSerialize["unitName"] = o.UnitName.Get()
	}
	toSerialize["quantity"] = o.Quantity
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if o.Sum.IsSet() {
		toSerialize["sum"] = o.Sum.Get()
	}
	toSerialize["ndsRate"] = o.NdsRate
	if o.Discount.IsSet() {
		toSerialize["discount"] = o.Discount.Get()
	}
	return toSerialize, nil
}

func (o *BillItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"quantity",
		"ndsRate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBillItem := _BillItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBillItem)

	if err != nil {
		return err
	}

	*o = BillItem(varBillItem)

	return err
}

type NullableBillItem struct {
	value *BillItem
	isSet bool
}

func (v NullableBillItem) Get() *BillItem {
	return v.value
}

func (v *NullableBillItem) Set(val *BillItem) {
	v.value = val
	v.isSet = true
}

func (v NullableBillItem) IsSet() bool {
	return v.isSet
}

func (v *NullableBillItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillItem(val *BillItem) *NullableBillItem {
	return &NullableBillItem{value: val, isSet: true}
}

func (v NullableBillItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


