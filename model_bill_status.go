/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
	"fmt"
)

// BillStatus   notPaid (Не оплачен)  paid (Оплачен)  partiallyPaid (Частично оплачен)  rejected (Отменён)  overdue (Истёк срок оплаты)
type BillStatus string

// List of BillStatus
const (
	NotPaid BillStatus = "notPaid"
	Paid BillStatus = "paid"
	PartiallyPaid BillStatus = "partiallyPaid"
	Rejected BillStatus = "rejected"
	Overdue BillStatus = "overdue"
)

// All allowed values of BillStatus enum
var AllowedBillStatusEnumValues = []BillStatus{
	"notPaid",
	"paid",
	"partiallyPaid",
	"rejected",
	"overdue",
}

func (v *BillStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillStatus(value)
	for _, existing := range AllowedBillStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillStatus", value)
}

// NewBillStatusFromValue returns a pointer to a valid BillStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillStatusFromValue(v string) (*BillStatus, error) {
	ev := BillStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillStatus: valid values are %v", v, AllowedBillStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillStatus) IsValid() bool {
	for _, existing := range AllowedBillStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillStatus value
func (v BillStatus) Ptr() *BillStatus {
	return &v
}

type NullableBillStatus struct {
	value *BillStatus
	isSet bool
}

func (v NullableBillStatus) Get() *BillStatus {
	return v.value
}

func (v *NullableBillStatus) Set(val *BillStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBillStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBillStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillStatus(val *BillStatus) *NullableBillStatus {
	return &NullableBillStatus{value: val, isSet: true}
}

func (v NullableBillStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

