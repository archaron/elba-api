/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateBankAccountRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateBankAccountRequest{}

// CreateBankAccountRequest struct for CreateBankAccountRequest
type CreateBankAccountRequest struct {
	// Номер банковского счёта
	AccountNumber string `json:"accountNumber"`
	// БИК
	Bik string `json:"bik"`
}

type _CreateBankAccountRequest CreateBankAccountRequest

// NewCreateBankAccountRequest instantiates a new CreateBankAccountRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBankAccountRequest(accountNumber string, bik string) *CreateBankAccountRequest {
	this := CreateBankAccountRequest{}
	this.AccountNumber = accountNumber
	this.Bik = bik
	return &this
}

// NewCreateBankAccountRequestWithDefaults instantiates a new CreateBankAccountRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBankAccountRequestWithDefaults() *CreateBankAccountRequest {
	this := CreateBankAccountRequest{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value
func (o *CreateBankAccountRequest) GetAccountNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value
// and a boolean to check if the value has been set.
func (o *CreateBankAccountRequest) GetAccountNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountNumber, true
}

// SetAccountNumber sets field value
func (o *CreateBankAccountRequest) SetAccountNumber(v string) {
	o.AccountNumber = v
}

// GetBik returns the Bik field value
func (o *CreateBankAccountRequest) GetBik() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bik
}

// GetBikOk returns a tuple with the Bik field value
// and a boolean to check if the value has been set.
func (o *CreateBankAccountRequest) GetBikOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bik, true
}

// SetBik sets field value
func (o *CreateBankAccountRequest) SetBik(v string) {
	o.Bik = v
}

func (o CreateBankAccountRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateBankAccountRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountNumber"] = o.AccountNumber
	toSerialize["bik"] = o.Bik
	return toSerialize, nil
}

func (o *CreateBankAccountRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountNumber",
		"bik",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateBankAccountRequest := _CreateBankAccountRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateBankAccountRequest)

	if err != nil {
		return err
	}

	*o = CreateBankAccountRequest(varCreateBankAccountRequest)

	return err
}

type NullableCreateBankAccountRequest struct {
	value *CreateBankAccountRequest
	isSet bool
}

func (v NullableCreateBankAccountRequest) Get() *CreateBankAccountRequest {
	return v.value
}

func (v *NullableCreateBankAccountRequest) Set(val *CreateBankAccountRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBankAccountRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBankAccountRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBankAccountRequest(val *CreateBankAccountRequest) *NullableCreateBankAccountRequest {
	return &NullableCreateBankAccountRequest{value: val, isSet: true}
}

func (v NullableCreateBankAccountRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBankAccountRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


