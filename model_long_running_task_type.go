/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
	"fmt"
)

// LongRunningTaskType   searchContractors (Операция поиска контрагентов)  searchProducts (Операция поиска товаров)  createProduct (Операция создания товара)  updateProduct (Операция обновления товара)
type LongRunningTaskType string

// List of LongRunningTaskType
const (
	SearchContractors LongRunningTaskType = "searchContractors"
	SearchProducts LongRunningTaskType = "searchProducts"
	CreateProduct LongRunningTaskType = "createProduct"
	UpdateProduct LongRunningTaskType = "updateProduct"
)

// All allowed values of LongRunningTaskType enum
var AllowedLongRunningTaskTypeEnumValues = []LongRunningTaskType{
	"searchContractors",
	"searchProducts",
	"createProduct",
	"updateProduct",
}

func (v *LongRunningTaskType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LongRunningTaskType(value)
	for _, existing := range AllowedLongRunningTaskTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LongRunningTaskType", value)
}

// NewLongRunningTaskTypeFromValue returns a pointer to a valid LongRunningTaskType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLongRunningTaskTypeFromValue(v string) (*LongRunningTaskType, error) {
	ev := LongRunningTaskType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LongRunningTaskType: valid values are %v", v, AllowedLongRunningTaskTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LongRunningTaskType) IsValid() bool {
	for _, existing := range AllowedLongRunningTaskTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LongRunningTaskType value
func (v LongRunningTaskType) Ptr() *LongRunningTaskType {
	return &v
}

type NullableLongRunningTaskType struct {
	value *LongRunningTaskType
	isSet bool
}

func (v NullableLongRunningTaskType) Get() *LongRunningTaskType {
	return v.value
}

func (v *NullableLongRunningTaskType) Set(val *LongRunningTaskType) {
	v.value = val
	v.isSet = true
}

func (v NullableLongRunningTaskType) IsSet() bool {
	return v.isSet
}

func (v *NullableLongRunningTaskType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLongRunningTaskType(val *LongRunningTaskType) *NullableLongRunningTaskType {
	return &NullableLongRunningTaskType{value: val, isSet: true}
}

func (v NullableLongRunningTaskType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLongRunningTaskType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

