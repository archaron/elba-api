/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
)

// checks if the Bank type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Bank{}

// Bank struct for Bank
type Bank struct {
	// Название банка
	Name NullableString `json:"name,omitempty"`
	// БИК
	Bik NullableString `json:"bik,omitempty"`
	// Корреспондентский счёт
	CorrAccount NullableString `json:"corrAccount,omitempty"`
	// Населенный пункт
	City NullableString `json:"city,omitempty"`
	// Тип населенного пункта
	CityType NullableString `json:"cityType,omitempty"`
}

// NewBank instantiates a new Bank object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBank() *Bank {
	this := Bank{}
	return &this
}

// NewBankWithDefaults instantiates a new Bank object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBankWithDefaults() *Bank {
	this := Bank{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bank) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bank) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Bank) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Bank) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Bank) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Bank) UnsetName() {
	o.Name.Unset()
}

// GetBik returns the Bik field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bank) GetBik() string {
	if o == nil || IsNil(o.Bik.Get()) {
		var ret string
		return ret
	}
	return *o.Bik.Get()
}

// GetBikOk returns a tuple with the Bik field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bank) GetBikOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bik.Get(), o.Bik.IsSet()
}

// HasBik returns a boolean if a field has been set.
func (o *Bank) HasBik() bool {
	if o != nil && o.Bik.IsSet() {
		return true
	}

	return false
}

// SetBik gets a reference to the given NullableString and assigns it to the Bik field.
func (o *Bank) SetBik(v string) {
	o.Bik.Set(&v)
}
// SetBikNil sets the value for Bik to be an explicit nil
func (o *Bank) SetBikNil() {
	o.Bik.Set(nil)
}

// UnsetBik ensures that no value is present for Bik, not even an explicit nil
func (o *Bank) UnsetBik() {
	o.Bik.Unset()
}

// GetCorrAccount returns the CorrAccount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bank) GetCorrAccount() string {
	if o == nil || IsNil(o.CorrAccount.Get()) {
		var ret string
		return ret
	}
	return *o.CorrAccount.Get()
}

// GetCorrAccountOk returns a tuple with the CorrAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bank) GetCorrAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CorrAccount.Get(), o.CorrAccount.IsSet()
}

// HasCorrAccount returns a boolean if a field has been set.
func (o *Bank) HasCorrAccount() bool {
	if o != nil && o.CorrAccount.IsSet() {
		return true
	}

	return false
}

// SetCorrAccount gets a reference to the given NullableString and assigns it to the CorrAccount field.
func (o *Bank) SetCorrAccount(v string) {
	o.CorrAccount.Set(&v)
}
// SetCorrAccountNil sets the value for CorrAccount to be an explicit nil
func (o *Bank) SetCorrAccountNil() {
	o.CorrAccount.Set(nil)
}

// UnsetCorrAccount ensures that no value is present for CorrAccount, not even an explicit nil
func (o *Bank) UnsetCorrAccount() {
	o.CorrAccount.Unset()
}

// GetCity returns the City field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bank) GetCity() string {
	if o == nil || IsNil(o.City.Get()) {
		var ret string
		return ret
	}
	return *o.City.Get()
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bank) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.City.Get(), o.City.IsSet()
}

// HasCity returns a boolean if a field has been set.
func (o *Bank) HasCity() bool {
	if o != nil && o.City.IsSet() {
		return true
	}

	return false
}

// SetCity gets a reference to the given NullableString and assigns it to the City field.
func (o *Bank) SetCity(v string) {
	o.City.Set(&v)
}
// SetCityNil sets the value for City to be an explicit nil
func (o *Bank) SetCityNil() {
	o.City.Set(nil)
}

// UnsetCity ensures that no value is present for City, not even an explicit nil
func (o *Bank) UnsetCity() {
	o.City.Unset()
}

// GetCityType returns the CityType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bank) GetCityType() string {
	if o == nil || IsNil(o.CityType.Get()) {
		var ret string
		return ret
	}
	return *o.CityType.Get()
}

// GetCityTypeOk returns a tuple with the CityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bank) GetCityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CityType.Get(), o.CityType.IsSet()
}

// HasCityType returns a boolean if a field has been set.
func (o *Bank) HasCityType() bool {
	if o != nil && o.CityType.IsSet() {
		return true
	}

	return false
}

// SetCityType gets a reference to the given NullableString and assigns it to the CityType field.
func (o *Bank) SetCityType(v string) {
	o.CityType.Set(&v)
}
// SetCityTypeNil sets the value for CityType to be an explicit nil
func (o *Bank) SetCityTypeNil() {
	o.CityType.Set(nil)
}

// UnsetCityType ensures that no value is present for CityType, not even an explicit nil
func (o *Bank) UnsetCityType() {
	o.CityType.Unset()
}

func (o Bank) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Bank) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Bik.IsSet() {
		toSerialize["bik"] = o.Bik.Get()
	}
	if o.CorrAccount.IsSet() {
		toSerialize["corrAccount"] = o.CorrAccount.Get()
	}
	if o.City.IsSet() {
		toSerialize["city"] = o.City.Get()
	}
	if o.CityType.IsSet() {
		toSerialize["cityType"] = o.CityType.Get()
	}
	return toSerialize, nil
}

type NullableBank struct {
	value *Bank
	isSet bool
}

func (v NullableBank) Get() *Bank {
	return v.value
}

func (v *NullableBank) Set(val *Bank) {
	v.value = val
	v.isSet = true
}

func (v NullableBank) IsSet() bool {
	return v.isSet
}

func (v *NullableBank) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBank(val *Bank) *NullableBank {
	return &NullableBank{value: val, isSet: true}
}

func (v NullableBank) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBank) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


