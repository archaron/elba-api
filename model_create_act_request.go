/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateActRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateActRequest{}

// CreateActRequest struct for CreateActRequest
type CreateActRequest struct {
	// Номер акта. Если номер не указан, то номер будет сгенерирован Эльбой
	Number NullableString `json:"number,omitempty"`
	// Дата акта
	Date string `json:"date"`
	// Ндс
	WithNDS NullableBool `json:"withNDS,omitempty"`
	// Основание
	ReasonName NullableString `json:"reasonName,omitempty"`
	// Комментарий
	Comment NullableString `json:"comment,omitempty"`
	// Дата основания
	ReasonDate NullableString `json:"reasonDate,omitempty"`
	// Идентификатор банковского счёта
	BankAccountId NullableString `json:"bankAccountId,omitempty"`
	// Идентификатор контрагента
	ContractorId NullableString `json:"contractorId,omitempty"`
	// Цена за единицу товара включает в себя НДС
	SumsWithNDS NullableBool `json:"sumsWithNDS,omitempty"`
	// Выставить акт со скидкой
	WithDiscount NullableBool `json:"withDiscount,omitempty"`
	// Фактурная часть
	WarehouseItems []ActItemToCreate `json:"warehouseItems,omitempty"`
}

type _CreateActRequest CreateActRequest

// NewCreateActRequest instantiates a new CreateActRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateActRequest(date string) *CreateActRequest {
	this := CreateActRequest{}
	this.Date = date
	return &this
}

// NewCreateActRequestWithDefaults instantiates a new CreateActRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateActRequestWithDefaults() *CreateActRequest {
	this := CreateActRequest{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateActRequest) GetNumber() string {
	if o == nil || IsNil(o.Number.Get()) {
		var ret string
		return ret
	}
	return *o.Number.Get()
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateActRequest) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Number.Get(), o.Number.IsSet()
}

// HasNumber returns a boolean if a field has been set.
func (o *CreateActRequest) HasNumber() bool {
	if o != nil && o.Number.IsSet() {
		return true
	}

	return false
}

// SetNumber gets a reference to the given NullableString and assigns it to the Number field.
func (o *CreateActRequest) SetNumber(v string) {
	o.Number.Set(&v)
}
// SetNumberNil sets the value for Number to be an explicit nil
func (o *CreateActRequest) SetNumberNil() {
	o.Number.Set(nil)
}

// UnsetNumber ensures that no value is present for Number, not even an explicit nil
func (o *CreateActRequest) UnsetNumber() {
	o.Number.Unset()
}

// GetDate returns the Date field value
func (o *CreateActRequest) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *CreateActRequest) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *CreateActRequest) SetDate(v string) {
	o.Date = v
}

// GetWithNDS returns the WithNDS field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateActRequest) GetWithNDS() bool {
	if o == nil || IsNil(o.WithNDS.Get()) {
		var ret bool
		return ret
	}
	return *o.WithNDS.Get()
}

// GetWithNDSOk returns a tuple with the WithNDS field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateActRequest) GetWithNDSOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithNDS.Get(), o.WithNDS.IsSet()
}

// HasWithNDS returns a boolean if a field has been set.
func (o *CreateActRequest) HasWithNDS() bool {
	if o != nil && o.WithNDS.IsSet() {
		return true
	}

	return false
}

// SetWithNDS gets a reference to the given NullableBool and assigns it to the WithNDS field.
func (o *CreateActRequest) SetWithNDS(v bool) {
	o.WithNDS.Set(&v)
}
// SetWithNDSNil sets the value for WithNDS to be an explicit nil
func (o *CreateActRequest) SetWithNDSNil() {
	o.WithNDS.Set(nil)
}

// UnsetWithNDS ensures that no value is present for WithNDS, not even an explicit nil
func (o *CreateActRequest) UnsetWithNDS() {
	o.WithNDS.Unset()
}

// GetReasonName returns the ReasonName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateActRequest) GetReasonName() string {
	if o == nil || IsNil(o.ReasonName.Get()) {
		var ret string
		return ret
	}
	return *o.ReasonName.Get()
}

// GetReasonNameOk returns a tuple with the ReasonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateActRequest) GetReasonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReasonName.Get(), o.ReasonName.IsSet()
}

// HasReasonName returns a boolean if a field has been set.
func (o *CreateActRequest) HasReasonName() bool {
	if o != nil && o.ReasonName.IsSet() {
		return true
	}

	return false
}

// SetReasonName gets a reference to the given NullableString and assigns it to the ReasonName field.
func (o *CreateActRequest) SetReasonName(v string) {
	o.ReasonName.Set(&v)
}
// SetReasonNameNil sets the value for ReasonName to be an explicit nil
func (o *CreateActRequest) SetReasonNameNil() {
	o.ReasonName.Set(nil)
}

// UnsetReasonName ensures that no value is present for ReasonName, not even an explicit nil
func (o *CreateActRequest) UnsetReasonName() {
	o.ReasonName.Unset()
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateActRequest) GetComment() string {
	if o == nil || IsNil(o.Comment.Get()) {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateActRequest) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *CreateActRequest) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *CreateActRequest) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *CreateActRequest) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *CreateActRequest) UnsetComment() {
	o.Comment.Unset()
}

// GetReasonDate returns the ReasonDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateActRequest) GetReasonDate() string {
	if o == nil || IsNil(o.ReasonDate.Get()) {
		var ret string
		return ret
	}
	return *o.ReasonDate.Get()
}

// GetReasonDateOk returns a tuple with the ReasonDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateActRequest) GetReasonDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReasonDate.Get(), o.ReasonDate.IsSet()
}

// HasReasonDate returns a boolean if a field has been set.
func (o *CreateActRequest) HasReasonDate() bool {
	if o != nil && o.ReasonDate.IsSet() {
		return true
	}

	return false
}

// SetReasonDate gets a reference to the given NullableString and assigns it to the ReasonDate field.
func (o *CreateActRequest) SetReasonDate(v string) {
	o.ReasonDate.Set(&v)
}
// SetReasonDateNil sets the value for ReasonDate to be an explicit nil
func (o *CreateActRequest) SetReasonDateNil() {
	o.ReasonDate.Set(nil)
}

// UnsetReasonDate ensures that no value is present for ReasonDate, not even an explicit nil
func (o *CreateActRequest) UnsetReasonDate() {
	o.ReasonDate.Unset()
}

// GetBankAccountId returns the BankAccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateActRequest) GetBankAccountId() string {
	if o == nil || IsNil(o.BankAccountId.Get()) {
		var ret string
		return ret
	}
	return *o.BankAccountId.Get()
}

// GetBankAccountIdOk returns a tuple with the BankAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateActRequest) GetBankAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BankAccountId.Get(), o.BankAccountId.IsSet()
}

// HasBankAccountId returns a boolean if a field has been set.
func (o *CreateActRequest) HasBankAccountId() bool {
	if o != nil && o.BankAccountId.IsSet() {
		return true
	}

	return false
}

// SetBankAccountId gets a reference to the given NullableString and assigns it to the BankAccountId field.
func (o *CreateActRequest) SetBankAccountId(v string) {
	o.BankAccountId.Set(&v)
}
// SetBankAccountIdNil sets the value for BankAccountId to be an explicit nil
func (o *CreateActRequest) SetBankAccountIdNil() {
	o.BankAccountId.Set(nil)
}

// UnsetBankAccountId ensures that no value is present for BankAccountId, not even an explicit nil
func (o *CreateActRequest) UnsetBankAccountId() {
	o.BankAccountId.Unset()
}

// GetContractorId returns the ContractorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateActRequest) GetContractorId() string {
	if o == nil || IsNil(o.ContractorId.Get()) {
		var ret string
		return ret
	}
	return *o.ContractorId.Get()
}

// GetContractorIdOk returns a tuple with the ContractorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateActRequest) GetContractorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContractorId.Get(), o.ContractorId.IsSet()
}

// HasContractorId returns a boolean if a field has been set.
func (o *CreateActRequest) HasContractorId() bool {
	if o != nil && o.ContractorId.IsSet() {
		return true
	}

	return false
}

// SetContractorId gets a reference to the given NullableString and assigns it to the ContractorId field.
func (o *CreateActRequest) SetContractorId(v string) {
	o.ContractorId.Set(&v)
}
// SetContractorIdNil sets the value for ContractorId to be an explicit nil
func (o *CreateActRequest) SetContractorIdNil() {
	o.ContractorId.Set(nil)
}

// UnsetContractorId ensures that no value is present for ContractorId, not even an explicit nil
func (o *CreateActRequest) UnsetContractorId() {
	o.ContractorId.Unset()
}

// GetSumsWithNDS returns the SumsWithNDS field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateActRequest) GetSumsWithNDS() bool {
	if o == nil || IsNil(o.SumsWithNDS.Get()) {
		var ret bool
		return ret
	}
	return *o.SumsWithNDS.Get()
}

// GetSumsWithNDSOk returns a tuple with the SumsWithNDS field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateActRequest) GetSumsWithNDSOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SumsWithNDS.Get(), o.SumsWithNDS.IsSet()
}

// HasSumsWithNDS returns a boolean if a field has been set.
func (o *CreateActRequest) HasSumsWithNDS() bool {
	if o != nil && o.SumsWithNDS.IsSet() {
		return true
	}

	return false
}

// SetSumsWithNDS gets a reference to the given NullableBool and assigns it to the SumsWithNDS field.
func (o *CreateActRequest) SetSumsWithNDS(v bool) {
	o.SumsWithNDS.Set(&v)
}
// SetSumsWithNDSNil sets the value for SumsWithNDS to be an explicit nil
func (o *CreateActRequest) SetSumsWithNDSNil() {
	o.SumsWithNDS.Set(nil)
}

// UnsetSumsWithNDS ensures that no value is present for SumsWithNDS, not even an explicit nil
func (o *CreateActRequest) UnsetSumsWithNDS() {
	o.SumsWithNDS.Unset()
}

// GetWithDiscount returns the WithDiscount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateActRequest) GetWithDiscount() bool {
	if o == nil || IsNil(o.WithDiscount.Get()) {
		var ret bool
		return ret
	}
	return *o.WithDiscount.Get()
}

// GetWithDiscountOk returns a tuple with the WithDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateActRequest) GetWithDiscountOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithDiscount.Get(), o.WithDiscount.IsSet()
}

// HasWithDiscount returns a boolean if a field has been set.
func (o *CreateActRequest) HasWithDiscount() bool {
	if o != nil && o.WithDiscount.IsSet() {
		return true
	}

	return false
}

// SetWithDiscount gets a reference to the given NullableBool and assigns it to the WithDiscount field.
func (o *CreateActRequest) SetWithDiscount(v bool) {
	o.WithDiscount.Set(&v)
}
// SetWithDiscountNil sets the value for WithDiscount to be an explicit nil
func (o *CreateActRequest) SetWithDiscountNil() {
	o.WithDiscount.Set(nil)
}

// UnsetWithDiscount ensures that no value is present for WithDiscount, not even an explicit nil
func (o *CreateActRequest) UnsetWithDiscount() {
	o.WithDiscount.Unset()
}

// GetWarehouseItems returns the WarehouseItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateActRequest) GetWarehouseItems() []ActItemToCreate {
	if o == nil {
		var ret []ActItemToCreate
		return ret
	}
	return o.WarehouseItems
}

// GetWarehouseItemsOk returns a tuple with the WarehouseItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateActRequest) GetWarehouseItemsOk() ([]ActItemToCreate, bool) {
	if o == nil || IsNil(o.WarehouseItems) {
		return nil, false
	}
	return o.WarehouseItems, true
}

// HasWarehouseItems returns a boolean if a field has been set.
func (o *CreateActRequest) HasWarehouseItems() bool {
	if o != nil && !IsNil(o.WarehouseItems) {
		return true
	}

	return false
}

// SetWarehouseItems gets a reference to the given []ActItemToCreate and assigns it to the WarehouseItems field.
func (o *CreateActRequest) SetWarehouseItems(v []ActItemToCreate) {
	o.WarehouseItems = v
}

func (o CreateActRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateActRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Number.IsSet() {
		toSerialize["number"] = o.Number.Get()
	}
	toSerialize["date"] = o.Date
	if o.WithNDS.IsSet() {
		toSerialize["withNDS"] = o.WithNDS.Get()
	}
	if o.ReasonName.IsSet() {
		toSerialize["reasonName"] = o.ReasonName.Get()
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	if o.ReasonDate.IsSet() {
		toSerialize["reasonDate"] = o.ReasonDate.Get()
	}
	if o.BankAccountId.IsSet() {
		toSerialize["bankAccountId"] = o.BankAccountId.Get()
	}
	if o.ContractorId.IsSet() {
		toSerialize["contractorId"] = o.ContractorId.Get()
	}
	if o.SumsWithNDS.IsSet() {
		toSerialize["sumsWithNDS"] = o.SumsWithNDS.Get()
	}
	if o.WithDiscount.IsSet() {
		toSerialize["withDiscount"] = o.WithDiscount.Get()
	}
	if o.WarehouseItems != nil {
		toSerialize["warehouseItems"] = o.WarehouseItems
	}
	return toSerialize, nil
}

func (o *CreateActRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateActRequest := _CreateActRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateActRequest)

	if err != nil {
		return err
	}

	*o = CreateActRequest(varCreateActRequest)

	return err
}

type NullableCreateActRequest struct {
	value *CreateActRequest
	isSet bool
}

func (v NullableCreateActRequest) Get() *CreateActRequest {
	return v.value
}

func (v *NullableCreateActRequest) Set(val *CreateActRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateActRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateActRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateActRequest(val *CreateActRequest) *NullableCreateActRequest {
	return &NullableCreateActRequest{value: val, isSet: true}
}

func (v NullableCreateActRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateActRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


