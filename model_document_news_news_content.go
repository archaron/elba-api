/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// DocumentNewsNewsContent - Содержимое новости
type DocumentNewsNewsContent struct {
	BillPaymentNewsContent *BillPaymentNewsContent
}

// BillPaymentNewsContentAsDocumentNewsNewsContent is a convenience function that returns BillPaymentNewsContent wrapped in DocumentNewsNewsContent
func BillPaymentNewsContentAsDocumentNewsNewsContent(v *BillPaymentNewsContent) DocumentNewsNewsContent {
	return DocumentNewsNewsContent{
		BillPaymentNewsContent: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DocumentNewsNewsContent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BillPaymentNewsContent
	err = newStrictDecoder(data).Decode(&dst.BillPaymentNewsContent)
	if err == nil {
		jsonBillPaymentNewsContent, _ := json.Marshal(dst.BillPaymentNewsContent)
		if string(jsonBillPaymentNewsContent) == "{}" { // empty struct
			dst.BillPaymentNewsContent = nil
		} else {
			if err = validator.Validate(dst.BillPaymentNewsContent); err != nil {
				dst.BillPaymentNewsContent = nil
			} else {
				match++
			}
		}
	} else {
		dst.BillPaymentNewsContent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BillPaymentNewsContent = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DocumentNewsNewsContent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DocumentNewsNewsContent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DocumentNewsNewsContent) MarshalJSON() ([]byte, error) {
	if src.BillPaymentNewsContent != nil {
		return json.Marshal(&src.BillPaymentNewsContent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DocumentNewsNewsContent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BillPaymentNewsContent != nil {
		return obj.BillPaymentNewsContent
	}

	// all schemas are nil
	return nil
}

type NullableDocumentNewsNewsContent struct {
	value *DocumentNewsNewsContent
	isSet bool
}

func (v NullableDocumentNewsNewsContent) Get() *DocumentNewsNewsContent {
	return v.value
}

func (v *NullableDocumentNewsNewsContent) Set(val *DocumentNewsNewsContent) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentNewsNewsContent) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentNewsNewsContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentNewsNewsContent(val *DocumentNewsNewsContent) *NullableDocumentNewsNewsContent {
	return &NullableDocumentNewsNewsContent{value: val, isSet: true}
}

func (v NullableDocumentNewsNewsContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentNewsNewsContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


