/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
)

// checks if the UpdateProductTaskResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProductTaskResult{}

// UpdateProductTaskResult struct for UpdateProductTaskResult
type UpdateProductTaskResult struct {
	// Ошибка при обновлении товара  productWithSameNameExists (Уже есть товар с таким названием)  deletingProductNameThatUsedInDocuments (Название товара нельзя удалить, так как оно используется в документах)  renamingProductNameThatUsedInDocuments (Название товара нельзя изменить, так как оно используется в документах)  deletingProductUnitThatUsedInDocuments (Единицу измерения нельзя удалить, так как она используется в документах)  renamingProductUnitThatUsedInDocuments (Единицу измерения нельзя переименовать, так как она используется в документах)
	UpdateProductError NullableUpdateProductError `json:"updateProductError,omitempty"`
}

// NewUpdateProductTaskResult instantiates a new UpdateProductTaskResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProductTaskResult() *UpdateProductTaskResult {
	this := UpdateProductTaskResult{}
	return &this
}

// NewUpdateProductTaskResultWithDefaults instantiates a new UpdateProductTaskResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProductTaskResultWithDefaults() *UpdateProductTaskResult {
	this := UpdateProductTaskResult{}
	return &this
}

// GetUpdateProductError returns the UpdateProductError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateProductTaskResult) GetUpdateProductError() UpdateProductError {
	if o == nil || IsNil(o.UpdateProductError.Get()) {
		var ret UpdateProductError
		return ret
	}
	return *o.UpdateProductError.Get()
}

// GetUpdateProductErrorOk returns a tuple with the UpdateProductError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateProductTaskResult) GetUpdateProductErrorOk() (*UpdateProductError, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateProductError.Get(), o.UpdateProductError.IsSet()
}

// HasUpdateProductError returns a boolean if a field has been set.
func (o *UpdateProductTaskResult) HasUpdateProductError() bool {
	if o != nil && o.UpdateProductError.IsSet() {
		return true
	}

	return false
}

// SetUpdateProductError gets a reference to the given NullableUpdateProductError and assigns it to the UpdateProductError field.
func (o *UpdateProductTaskResult) SetUpdateProductError(v UpdateProductError) {
	o.UpdateProductError.Set(&v)
}
// SetUpdateProductErrorNil sets the value for UpdateProductError to be an explicit nil
func (o *UpdateProductTaskResult) SetUpdateProductErrorNil() {
	o.UpdateProductError.Set(nil)
}

// UnsetUpdateProductError ensures that no value is present for UpdateProductError, not even an explicit nil
func (o *UpdateProductTaskResult) UnsetUpdateProductError() {
	o.UpdateProductError.Unset()
}

func (o UpdateProductTaskResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProductTaskResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UpdateProductError.IsSet() {
		toSerialize["updateProductError"] = o.UpdateProductError.Get()
	}
	return toSerialize, nil
}

type NullableUpdateProductTaskResult struct {
	value *UpdateProductTaskResult
	isSet bool
}

func (v NullableUpdateProductTaskResult) Get() *UpdateProductTaskResult {
	return v.value
}

func (v *NullableUpdateProductTaskResult) Set(val *UpdateProductTaskResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProductTaskResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProductTaskResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProductTaskResult(val *UpdateProductTaskResult) *NullableUpdateProductTaskResult {
	return &NullableUpdateProductTaskResult{value: val, isSet: true}
}

func (v NullableUpdateProductTaskResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProductTaskResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


