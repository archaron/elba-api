/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateProductRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateProductRequest{}

// CreateProductRequest struct for CreateProductRequest
type CreateProductRequest struct {
	// Список названий товара
	Names []ProductNameToCreate `json:"names"`
	// Список единиц измерений товара
	Units []ProductUnitToCreate `json:"units"`
	// Артикул
	Article NullableString `json:"article,omitempty"`
	// Комментарий
	Comment NullableString `json:"comment,omitempty"`
	// Количество на складе
	Amount NullableFloat64 `json:"amount,omitempty"`
}

type _CreateProductRequest CreateProductRequest

// NewCreateProductRequest instantiates a new CreateProductRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProductRequest(names []ProductNameToCreate, units []ProductUnitToCreate) *CreateProductRequest {
	this := CreateProductRequest{}
	this.Names = names
	this.Units = units
	return &this
}

// NewCreateProductRequestWithDefaults instantiates a new CreateProductRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProductRequestWithDefaults() *CreateProductRequest {
	this := CreateProductRequest{}
	return &this
}

// GetNames returns the Names field value
func (o *CreateProductRequest) GetNames() []ProductNameToCreate {
	if o == nil {
		var ret []ProductNameToCreate
		return ret
	}

	return o.Names
}

// GetNamesOk returns a tuple with the Names field value
// and a boolean to check if the value has been set.
func (o *CreateProductRequest) GetNamesOk() ([]ProductNameToCreate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Names, true
}

// SetNames sets field value
func (o *CreateProductRequest) SetNames(v []ProductNameToCreate) {
	o.Names = v
}

// GetUnits returns the Units field value
func (o *CreateProductRequest) GetUnits() []ProductUnitToCreate {
	if o == nil {
		var ret []ProductUnitToCreate
		return ret
	}

	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value
// and a boolean to check if the value has been set.
func (o *CreateProductRequest) GetUnitsOk() ([]ProductUnitToCreate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Units, true
}

// SetUnits sets field value
func (o *CreateProductRequest) SetUnits(v []ProductUnitToCreate) {
	o.Units = v
}

// GetArticle returns the Article field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateProductRequest) GetArticle() string {
	if o == nil || IsNil(o.Article.Get()) {
		var ret string
		return ret
	}
	return *o.Article.Get()
}

// GetArticleOk returns a tuple with the Article field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateProductRequest) GetArticleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Article.Get(), o.Article.IsSet()
}

// HasArticle returns a boolean if a field has been set.
func (o *CreateProductRequest) HasArticle() bool {
	if o != nil && o.Article.IsSet() {
		return true
	}

	return false
}

// SetArticle gets a reference to the given NullableString and assigns it to the Article field.
func (o *CreateProductRequest) SetArticle(v string) {
	o.Article.Set(&v)
}
// SetArticleNil sets the value for Article to be an explicit nil
func (o *CreateProductRequest) SetArticleNil() {
	o.Article.Set(nil)
}

// UnsetArticle ensures that no value is present for Article, not even an explicit nil
func (o *CreateProductRequest) UnsetArticle() {
	o.Article.Unset()
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateProductRequest) GetComment() string {
	if o == nil || IsNil(o.Comment.Get()) {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateProductRequest) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *CreateProductRequest) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *CreateProductRequest) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *CreateProductRequest) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *CreateProductRequest) UnsetComment() {
	o.Comment.Unset()
}

// GetAmount returns the Amount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateProductRequest) GetAmount() float64 {
	if o == nil || IsNil(o.Amount.Get()) {
		var ret float64
		return ret
	}
	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateProductRequest) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// HasAmount returns a boolean if a field has been set.
func (o *CreateProductRequest) HasAmount() bool {
	if o != nil && o.Amount.IsSet() {
		return true
	}

	return false
}

// SetAmount gets a reference to the given NullableFloat64 and assigns it to the Amount field.
func (o *CreateProductRequest) SetAmount(v float64) {
	o.Amount.Set(&v)
}
// SetAmountNil sets the value for Amount to be an explicit nil
func (o *CreateProductRequest) SetAmountNil() {
	o.Amount.Set(nil)
}

// UnsetAmount ensures that no value is present for Amount, not even an explicit nil
func (o *CreateProductRequest) UnsetAmount() {
	o.Amount.Unset()
}

func (o CreateProductRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateProductRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["names"] = o.Names
	toSerialize["units"] = o.Units
	if o.Article.IsSet() {
		toSerialize["article"] = o.Article.Get()
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	if o.Amount.IsSet() {
		toSerialize["amount"] = o.Amount.Get()
	}
	return toSerialize, nil
}

func (o *CreateProductRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"names",
		"units",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateProductRequest := _CreateProductRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateProductRequest)

	if err != nil {
		return err
	}

	*o = CreateProductRequest(varCreateProductRequest)

	return err
}

type NullableCreateProductRequest struct {
	value *CreateProductRequest
	isSet bool
}

func (v NullableCreateProductRequest) Get() *CreateProductRequest {
	return v.value
}

func (v *NullableCreateProductRequest) Set(val *CreateProductRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProductRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProductRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProductRequest(val *CreateProductRequest) *NullableCreateProductRequest {
	return &NullableCreateProductRequest{value: val, isSet: true}
}

func (v NullableCreateProductRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProductRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


