/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductUnitToCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductUnitToCreate{}

// ProductUnitToCreate struct for ProductUnitToCreate
type ProductUnitToCreate struct {
	// Единица измерения является основной
	IsMain bool `json:"isMain"`
	// Название единицы измерения
	Name string `json:"name"`
	// Соотношение единицы измерения с основной
	Ratio float64 `json:"ratio"`
}

type _ProductUnitToCreate ProductUnitToCreate

// NewProductUnitToCreate instantiates a new ProductUnitToCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductUnitToCreate(isMain bool, name string, ratio float64) *ProductUnitToCreate {
	this := ProductUnitToCreate{}
	this.IsMain = isMain
	this.Name = name
	this.Ratio = ratio
	return &this
}

// NewProductUnitToCreateWithDefaults instantiates a new ProductUnitToCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductUnitToCreateWithDefaults() *ProductUnitToCreate {
	this := ProductUnitToCreate{}
	return &this
}

// GetIsMain returns the IsMain field value
func (o *ProductUnitToCreate) GetIsMain() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMain
}

// GetIsMainOk returns a tuple with the IsMain field value
// and a boolean to check if the value has been set.
func (o *ProductUnitToCreate) GetIsMainOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMain, true
}

// SetIsMain sets field value
func (o *ProductUnitToCreate) SetIsMain(v bool) {
	o.IsMain = v
}

// GetName returns the Name field value
func (o *ProductUnitToCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProductUnitToCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProductUnitToCreate) SetName(v string) {
	o.Name = v
}

// GetRatio returns the Ratio field value
func (o *ProductUnitToCreate) GetRatio() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Ratio
}

// GetRatioOk returns a tuple with the Ratio field value
// and a boolean to check if the value has been set.
func (o *ProductUnitToCreate) GetRatioOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ratio, true
}

// SetRatio sets field value
func (o *ProductUnitToCreate) SetRatio(v float64) {
	o.Ratio = v
}

func (o ProductUnitToCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductUnitToCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isMain"] = o.IsMain
	toSerialize["name"] = o.Name
	toSerialize["ratio"] = o.Ratio
	return toSerialize, nil
}

func (o *ProductUnitToCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isMain",
		"name",
		"ratio",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductUnitToCreate := _ProductUnitToCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductUnitToCreate)

	if err != nil {
		return err
	}

	*o = ProductUnitToCreate(varProductUnitToCreate)

	return err
}

type NullableProductUnitToCreate struct {
	value *ProductUnitToCreate
	isSet bool
}

func (v NullableProductUnitToCreate) Get() *ProductUnitToCreate {
	return v.value
}

func (v *NullableProductUnitToCreate) Set(val *ProductUnitToCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableProductUnitToCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableProductUnitToCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductUnitToCreate(val *ProductUnitToCreate) *NullableProductUnitToCreate {
	return &NullableProductUnitToCreate{value: val, isSet: true}
}

func (v NullableProductUnitToCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductUnitToCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


