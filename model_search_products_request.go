/*
Elba Public API

  ## С чего начать    Для работы с API нужно выпустить API-ключ — уникальный токен, позволяющий авторизовывать ваши запросы в API Контур.Эльбы.    #### Как получить API-ключ    1. Откройте Эльбу, в верхнем правом углу нажмите «Настройки и оплата» → «Настройки сервиса».  2. Перейдите на вкладку «API».  2. Нажмите на кнопку «Выпустить ключ». После этого откроется окно со сгенерированным API-ключом.  3. В открывшемся окне появится ваш API-ключ. Скопируйте и сохраните его в надежном месте, потому что он будет показан только один раз. Это сделано в целях безопасности — мы не храним ключи на своей стороне.

API version: v1
Contact: e@kontur.ru
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elba

import (
	"encoding/json"
)

// checks if the SearchProductsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchProductsRequest{}

// SearchProductsRequest struct for SearchProductsRequest
type SearchProductsRequest struct {
	// Позиция, начиная с которой будут вычитываться результаты поиска товаров. По-умолчанию - 0
	Offset NullableInt32 `json:"offset,omitempty"`
	// Количество товаров, которое необходимо получить при поиске. По-умолчанию - 100
	Limit NullableInt32 `json:"limit,omitempty"`
	// Фильтр поиска. Хотябы один из параметров фильтра должен быть заполнен
	Filter NullableSearchProductsFilter `json:"filter,omitempty"`
}

// NewSearchProductsRequest instantiates a new SearchProductsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchProductsRequest() *SearchProductsRequest {
	this := SearchProductsRequest{}
	return &this
}

// NewSearchProductsRequestWithDefaults instantiates a new SearchProductsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchProductsRequestWithDefaults() *SearchProductsRequest {
	this := SearchProductsRequest{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchProductsRequest) GetOffset() int32 {
	if o == nil || IsNil(o.Offset.Get()) {
		var ret int32
		return ret
	}
	return *o.Offset.Get()
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchProductsRequest) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Offset.Get(), o.Offset.IsSet()
}

// HasOffset returns a boolean if a field has been set.
func (o *SearchProductsRequest) HasOffset() bool {
	if o != nil && o.Offset.IsSet() {
		return true
	}

	return false
}

// SetOffset gets a reference to the given NullableInt32 and assigns it to the Offset field.
func (o *SearchProductsRequest) SetOffset(v int32) {
	o.Offset.Set(&v)
}
// SetOffsetNil sets the value for Offset to be an explicit nil
func (o *SearchProductsRequest) SetOffsetNil() {
	o.Offset.Set(nil)
}

// UnsetOffset ensures that no value is present for Offset, not even an explicit nil
func (o *SearchProductsRequest) UnsetOffset() {
	o.Offset.Unset()
}

// GetLimit returns the Limit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchProductsRequest) GetLimit() int32 {
	if o == nil || IsNil(o.Limit.Get()) {
		var ret int32
		return ret
	}
	return *o.Limit.Get()
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchProductsRequest) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Limit.Get(), o.Limit.IsSet()
}

// HasLimit returns a boolean if a field has been set.
func (o *SearchProductsRequest) HasLimit() bool {
	if o != nil && o.Limit.IsSet() {
		return true
	}

	return false
}

// SetLimit gets a reference to the given NullableInt32 and assigns it to the Limit field.
func (o *SearchProductsRequest) SetLimit(v int32) {
	o.Limit.Set(&v)
}
// SetLimitNil sets the value for Limit to be an explicit nil
func (o *SearchProductsRequest) SetLimitNil() {
	o.Limit.Set(nil)
}

// UnsetLimit ensures that no value is present for Limit, not even an explicit nil
func (o *SearchProductsRequest) UnsetLimit() {
	o.Limit.Unset()
}

// GetFilter returns the Filter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchProductsRequest) GetFilter() SearchProductsFilter {
	if o == nil || IsNil(o.Filter.Get()) {
		var ret SearchProductsFilter
		return ret
	}
	return *o.Filter.Get()
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchProductsRequest) GetFilterOk() (*SearchProductsFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filter.Get(), o.Filter.IsSet()
}

// HasFilter returns a boolean if a field has been set.
func (o *SearchProductsRequest) HasFilter() bool {
	if o != nil && o.Filter.IsSet() {
		return true
	}

	return false
}

// SetFilter gets a reference to the given NullableSearchProductsFilter and assigns it to the Filter field.
func (o *SearchProductsRequest) SetFilter(v SearchProductsFilter) {
	o.Filter.Set(&v)
}
// SetFilterNil sets the value for Filter to be an explicit nil
func (o *SearchProductsRequest) SetFilterNil() {
	o.Filter.Set(nil)
}

// UnsetFilter ensures that no value is present for Filter, not even an explicit nil
func (o *SearchProductsRequest) UnsetFilter() {
	o.Filter.Unset()
}

func (o SearchProductsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchProductsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Offset.IsSet() {
		toSerialize["offset"] = o.Offset.Get()
	}
	if o.Limit.IsSet() {
		toSerialize["limit"] = o.Limit.Get()
	}
	if o.Filter.IsSet() {
		toSerialize["filter"] = o.Filter.Get()
	}
	return toSerialize, nil
}

type NullableSearchProductsRequest struct {
	value *SearchProductsRequest
	isSet bool
}

func (v NullableSearchProductsRequest) Get() *SearchProductsRequest {
	return v.value
}

func (v *NullableSearchProductsRequest) Set(val *SearchProductsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchProductsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchProductsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchProductsRequest(val *SearchProductsRequest) *NullableSearchProductsRequest {
	return &NullableSearchProductsRequest{value: val, isSet: true}
}

func (v NullableSearchProductsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchProductsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


